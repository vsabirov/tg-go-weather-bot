package cmdhandlers

import (
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"github.com/vsabirov/tggoweatherbot/executors"
)

// User request handler function type.
type CommandHandler func(update tgbotapi.Update, bot *tgbotapi.BotAPI)

// Welcome message for new users.
func Start(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	userKeyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ú–æ—Å–∫–≤–∞"),
			tgbotapi.NewKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
		),
	)

	response := tgbotapi.NewMessage(update.Message.Chat.ID,
		"–í–≤–µ–¥–∏—Ç–µ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è <–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>', –∏–ª–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'. –ù–∞–ø—Ä–∏–º–µ—Ä '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ú–æ—Å–∫–≤–∞'")

	response.ReplyMarkup = userKeyboard

	bot.Send(response)
}

// This function handles an information request from the user.
func Info(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	response := tgbotapi.NewMessage(update.Message.Chat.ID, "")
	response.ReplyToMessageID = update.Message.MessageID

	arguments := strings.Split(update.Message.Text, " ")
	if len(arguments) < 2 {
		response.Text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª."

		bot.Send(response)
		return
	}

	city := arguments[1]

	geodata, err := executors.FetchGeoInformation(city)
	if err != nil {
		log.Println(err)

		response.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥–æ—Ä–æ–¥–∞."

		bot.Send(response)
		return
	}

	weather, err := executors.FetchWeatherInformation(geodata)
	if err != nil {
		log.Println(err)

		response.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ."

		bot.Send(response)
		return
	}

	response.Text = fmt.Sprintf(
		"üèôÔ∏è –ü–æ–≥–æ–¥–∞ –≤ %s, %s:\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.2f¬∞C\nüíß –î–æ–∂–¥–ª–∏–≤–æ—Å—Ç—å: %.1f%%\n‚Äçüí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: %.2f –∫–º/—á",
		geodata.City, geodata.Country,
		weather.Temperature, weather.RainLevel*100, weather.WindSpeed)

	bot.Send(response)

	go func() {
		err = executors.RecordStats(update.Message.From.ID, geodata.City)
		if err != nil {
			log.Println(err)
		}
	}()
}

// This function handles a statistics request from the user.
func Stats(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	response := tgbotapi.NewMessage(update.Message.Chat.ID, "")
	response.ReplyToMessageID = update.Message.MessageID

	stats, err := executors.FetchUserStats(update.Message.From.ID)
	if err != nil {
		log.Println(err)

		response.Text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —É –Ω–∞—Å."

		bot.Send(response)
		return
	}

	response.Text = fmt.Sprintf("üïí –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: %s\nüßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d\nüèôÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ–¥: %s",
		stats.FirstRequest.UTC().Format(time.UnixDate), stats.AmountOfRequests,
		stats.LastCity)

	bot.Send(response)
}
